#!/bin/bash

print_help() {
  echo "$(tput bold)OVERVIEW:$(tput sgr0) Build a binary for the specified Swift package.

$(tput bold)USAGE:$(tput sgr0) $(basename "$0") [--config debug|release] [--arch arm64|x86_64|universal] [<swift-package-path>] [--install [<path>]]

$(tput bold)ARGUMENTS:$(tput sgr0)

  [<swift-package-path>]   Path to the Swift package to build. If not specified, the command uses the current directory.

$(tput bold)OPTIONS:$(tput sgr0)

  --config <configuration> Specify the configuration for the build. Options are 'debug' or 'release'. If not
                           specified, the build uses 'release' configuration.

  --arch <architecture>    Specify the architecture for the binary. Options are 'arm64', 'x86_64', or 'universal'.
                           If not specified, the build uses the current architecture of the environment.

  --install [<path>]       Installs the built binary to the specified path. If a path is provided, the binary will be
                           installed to the specified path. If no path is provided, the binary will be installed to
                           /usr/local/bin.

  -f, --force              Force the command to overwrite existing files.

  -h, --help               Display this help message.

  -v, --version            Print the version information.

$(tput bold)EXAMPLES:$(tput sgr0)

  $(tput setaf 2)- $(basename "$0")$(tput sgr0)
    Builds a binary for the Swift package located at the current directory, using the current system architecture.

  $(tput setaf 2)- $(basename "$0") --arch arm64 /path/to/package$(tput sgr0)
    Builds a binary for the Swift package located at /path/to/package, using arm64 architecture.

  $(tput setaf 2)- $(basename "$0") --install path/to/install /path/to/package$(tput sgr0)
    Builds a binary for the Swift package located at /path/to/package, using the current system architecture. And
    installs the binary to path/to/install.
"
}

print_version() {
  echo "0.1.0"
}

# shellcheck disable=SC1091
source "$(dirname "${BASH_SOURCE[0]}")/../lib.sh"

# Constants
DEFAULT_INSTALL_PATH="/usr/local/bin"

# Variables
config=""
config_set=false
architecture=""
architecture_set=false
package_dir=""
package_dir_set=false
install_dir=""
force=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  --config)
    config="$2"
    if [[ $config != "debug" && $config != "release" ]]; then
      echo "🛑 Unsupported configuration: $config" >&2
      exit 1
    fi
    config_set=true
    shift # past option
    shift # past value
    ;;
  --arch)
    architecture="$2"
    if [[ $architecture != "arm64" && $architecture != "x86_64" && $architecture != "universal" ]]; then
      echo "🛑 Unsupported architecture: $architecture" >&2
      exit 1
    fi
    architecture_set=true
    shift # past option
    shift # past value
    ;;
  --install)
    if [[ -n $2 && ${2:0:1} != '-' ]]; then # if there is an argument and that it doesn't start with a "-"
      install_dir="$2"
      # exit if the path is pointing to a file
      if [[ -f $install_dir ]]; then
        echo "🛑 Error: $install_dir is a valid install path." >&2
        exit 1
      fi
      shift # past value
    else
      install_dir="$DEFAULT_INSTALL_PATH"
    fi
    shift # past argument
    ;;
  --force | -f)
    force=true
    shift # past argument
    ;;
  --help | -h)
    print_help
    exit 0
    ;;
  --version | -v)
    print_version
    exit 0
    ;;
  *)
    if [[ -n $1 && ${1:0:1} != '-' ]]; then # if there is an argument and that it doesn't start with a "-"
      if [[ $package_dir_set == false ]]; then
        package_dir="$1"
        package_dir_set=true
      else
        echo "🛑 Unexpected argument: $1" >&2
        exit 1
      fi
      shift # past argument
    else
      echo "🛑 Unknown option: $1" >&2
      exit 1
    fi
    ;;
  esac
done

if [[ $package_dir_set == false ]]; then
  package_dir=$(pwd)
fi
package_dir=$(_ct_grealpath "$package_dir")

if [[ $config_set == false ]]; then
  config="release"
fi

if [[ $architecture_set == false ]]; then
  architecture=$(uname -m)
fi

if [[ ! -f "$package_dir/Package.swift" ]]; then
  echo "🛑 Error: $package_dir is not a Swift package." >&2
  exit 1
fi

should_install=false
if [[ -n $install_dir ]]; then
  should_install=true
fi
if [[ $should_install == true ]]; then
  install_dir=$(_ct_grealpath "$install_dir")
fi

# sanity check
# architecture

echo "ℹ️  Build configuration:"
echo "- Swift package: ${CYAN}$package_dir${NORMAL}"
echo "- Configuration: ${CYAN}$config${NORMAL}"
echo "- Architecture: ${CYAN}$architecture${NORMAL}"
if [[ $should_install == true ]]; then
  echo "- Install path: ${CYAN}$install_dir${NORMAL}"
fi

echo ""
if [[ $architecture == "universal" ]]; then
  echo "➡️  Building universal binary..."
  swift build --package-path "$package_dir" -c "$config" --arch arm64 --arch x86_64
else
  echo "➡️  Building for $architecture..."
  swift build --package-path "$package_dir" -c "$config" --arch "$architecture"
fi

# shellcheck disable=SC2181
if [[ $? -ne 0 ]]; then
  echo "🛑 swift build failed." >&2
  exit 1
fi

current_dir=$(pwd) # store current dir for later use.
cd "$package_dir" || (echo "Failed to navigate to $package_dir" && exit 1)

if [[ ! -d "Products" ]]; then
  mkdir -p ./Products
  echo "➡️  Created ./Products directory"
fi

if [[ $architecture == "universal" ]]; then
  if [[ $config == "debug" ]]; then
    artifact_dir="./.build/apple/Products/Debug"
  elif [[ $config == "release" ]]; then
    artifact_dir="./.build/apple/Products/Release"
  fi
elif [[ $config == "debug" ]]; then
  artifact_dir="./.build/debug"
elif [[ $config == "release" ]]; then
  artifact_dir="./.build/release"
fi

cd "$artifact_dir" || (echo "Failed to navigate to $artifact_dir" && exit 1)
executable_path=$(_ct_grealpath "$(find . -maxdepth 1 -perm -111 -type f)")
executable_name=$(basename "$executable_path")

echo ""
echo "➡️  Strip $executable_name"
if ! strip "$executable_path"; then
  echo "🛑 Failed to strip $executable_name" >&2
  exit 1
fi

echo ""
echo "➡️  Copying $executable_name into ${CYAN}$package_dir/Products/$executable_name${NORMAL}"
# if file exists, prompt for confirmation
if [[ -f "$package_dir/Products/$executable_name" && $force == false ]]; then
  echo "⚠️  A binary already exists at: ${YELLOW}$package_dir/Products/$executable_name${NORMAL}"

  reply=""
  prompt "Do you want to replace it?" "reply=\"y\"" "reply=\"n\"" "reply=\"n\""
  if [[ ! $reply =~ ^[Yy]$ ]]; then
    echo "🛑 Aborted." >&2
    exit 1
  fi
fi
cp -f "$executable_path" "$package_dir/Products/$executable_name"
echo "✅ Copied $executable_name into ${GREEN}$package_dir/Products/$executable_name${NORMAL}"

# verify the binary has the correct architecture
if [[ $architecture == "universal" ]]; then
  if ! lipo "$package_dir/Products/$executable_name" -verify_arch x86_64 arm64; then
    echo "🛑 The binary does not have the correct architecture." >&2
    exit 1
  fi
else
  if ! lipo "$package_dir/Products/$executable_name" -verify_arch "$architecture"; then
    echo "🛑 The binary does not have the correct architecture." >&2
    exit 1
  fi
fi

if [[ $should_install == true ]]; then
  echo ""
  echo "➡️  Installing $executable_name to ${CYAN}$install_dir/$executable_name${NORMAL}"
  # if file exists, prompt for confirmation
  if [[ -f "$install_dir/$executable_name" && $force == false ]]; then
    echo "⚠️  A binary already exists at: ${YELLOW}$install_dir/$executable_name${NORMAL}"

    reply=""
    prompt "Do you want to replace it?" "reply=\"y\"" "reply=\"n\"" "reply=\"n\""
    if [[ ! $reply =~ ^[Yy]$ ]]; then
      echo "🛑 Aborted." >&2
      exit 1
    fi
  fi
  install -m 755 "$package_dir/Products/$executable_name" "$install_dir"
  echo "✅ Installed $executable_name to ${GREEN}$install_dir/$executable_name${NORMAL}"
fi

cd "$current_dir" || (echo "Failed to navigate to $current_dir" && exit 1)

# References:
# - https://liamnichols.eu/2020/08/01/building-swift-packages-as-a-universal-binary.html
# - https://scriptingosx.com/category/swift/
# - build swift files directly:
#   - `xcrun -sdk macosx swiftc main.swift -o executable`
