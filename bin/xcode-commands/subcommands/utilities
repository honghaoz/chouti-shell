#!/bin/bash

# OVERVIEW: Utilities for working with Xcode .pbxproj files.

# Get the target ids and names.
# - Arguments:
#   - $1: The path to the .pbxproj file.
# - Output:
#   - A list of target ids and names in the format of "<target-id>":"<target-name>".
# - Example:
#   get_targets /path/to/project.pbxproj
get_targets() {
  # /* Begin PBXProject section */
  # 		0225CCC5204BECF700273B48 /* Project object */ = {
  # 			isa = PBXProject;
  # 			attributes = {
  # 				BuildIndependentTargetsInParallel = YES;
  # 				LastSwiftUpdateCheck = 1220;
  # 				LastUpgradeCheck = 1500;
  # 				ORGANIZATIONNAME = HonghaoZ;
  # 				TargetAttributes = {
  # 					0225CCCC204BECF700273B48 = {
  # 						CreatedOnToolsVersion = 9.2;
  # 						LastSwiftMigration = 1020;
  # 						SystemCapabilities = {
  # 							com.apple.ApplicationGroups.iOS = {
  # 								enabled = 1;
  # 							};
  # 						};
  # 					};
  # 					0225CCF8204BF7F800273B48 = {
  # 						CreatedOnToolsVersion = 9.2;
  # 						LastSwiftMigration = 1020;
  # 						SystemCapabilities = {
  # 							com.apple.ApplicationGroups.iOS = {
  # 								enabled = 1;
  # 							};
  # 						};
  # 					};
  # 				};
  # 			};
  # 			buildConfigurationList = 0225CCC8204BECF700273B48 /* Build configuration list for PBXProject "Wazer" */;
  # 			compatibilityVersion = "Xcode 8.0";
  # 			developmentRegion = en;
  # 			hasScannedForEncodings = 0;
  # 			knownRegions = (
  # 				en,
  # 				Base,
  # 			);
  # 			mainGroup = 0225CCC4204BECF700273B48;
  # 			packageReferences = (
  # 			);
  # 			productRefGroup = 0225CCCE204BECF700273B48 /* Products */;
  # 			projectDirPath = "";
  # 			projectRoot = "";
  # 			targets = (
  # 				0225CCCC204BECF700273B48 /* Maze */,
  # 				0225CCF8204BF7F800273B48 /* MazeShareExtension */,
  # 			);
  # 		};
  # /* End PBXProject section */
  local pbxproj_path=$1
  local targets_section
  targets_section=$(awk '/targets = \(/ {flag=1; next} /\);/ {flag=0} flag' "$pbxproj_path")

  while IFS= read -r line; do
    if [[ $line =~ ([A-Za-z0-9]+)[[:space:]]+/\*[[:space:]]+(.+)[[:space:]]+\*/ ]]; then
      target_id="${BASH_REMATCH[1]}"
      target_name="${BASH_REMATCH[2]}"

      echo "\"$target_id\":\"$target_name\""
    fi
  done < <(echo "$targets_section")
}

# Get the buildConfigurationList id for a given target id.
# - Arguments:
#   - $1: The path to the .pbxproj file.
#   - $2: The target id.
# - Output:
#   - The buildConfigurationList id.
# - Example:
#   get_build_configuration_list_id /path/to/project.pbxproj 0225CCCC204BECF700273B48
get_build_configuration_list_id() {
  local pbxproj_path=$1
  local target_id=$2
  local config_list_id
  config_list_id=$(awk "/$target_id \/\* /,/\};/" "$pbxproj_path" | grep "buildConfigurationList = " | awk -F ' = ' '{print $2}' | cut -d ' ' -f 1)
  echo "$config_list_id"
}

# Get the configuration ids from a buildConfigurationList id.
# - Arguments:
#   - $1: The path to the .pbxproj file.
#   - $2: The buildConfigurationList id.
# - Output:
#   - A list of configuration ids and names in the format of "<config-id>":"<config-name>".
# - Example:
#   get_configurations /path/to/project.pbxproj 0225CCC8204BECF700273B48
get_configurations() {
  # /* Begin XCConfigurationList section */
  # 		0225CCC8204BECF700273B48 /* Build configuration list for PBXProject "Wazer" */ = {
  # 			isa = XCConfigurationList;
  # 			buildConfigurations = (
  # 				0225CCDD204BECF700273B48 /* Debug */,
  # 				0225CCDE204BECF700273B48 /* Release */,
  # 			);
  # 			defaultConfigurationIsVisible = 0;
  # 			defaultConfigurationName = Release;
  # 		};
  # 		0225CCDF204BECF700273B48 /* Build configuration list for PBXNativeTarget "Maze" */ = {
  # 			isa = XCConfigurationList;
  # 			buildConfigurations = (
  # 				0225CCE0204BECF700273B48 /* Debug */,
  # 				0225CCE1204BECF700273B48 /* Release */,
  # 			);
  # 			defaultConfigurationIsVisible = 0;
  # 			defaultConfigurationName = Release;
  # 		};
  # 		0225CD04204BF7F800273B48 /* Build configuration list for PBXNativeTarget "MazeShareExtension" */ = {
  # 			isa = XCConfigurationList;
  # 			buildConfigurations = (
  # 				0225CD05204BF7F800273B48 /* Debug */,
  # 				0225CD06204BF7F800273B48 /* Release */,
  # 			);
  # 			defaultConfigurationIsVisible = 0;
  # 			defaultConfigurationName = Release;
  # 		};
  # /* End XCConfigurationList section */
  local pbxproj_path=$1
  local config_list_id=$2
  local configuration_list_section
  local specific_config_list

  # extract the entire XCConfigurationList section
  configuration_list_section=$(awk '/\/\* Begin XCConfigurationList section \*\//,/\/* End XCConfigurationList section *\//' "$pbxproj_path")

  # extract the specified configuration list
  specific_config_list=$(echo "$configuration_list_section" | awk -v id="$config_list_id" -F ' = ' '$1 ~ id {flag=1; next} flag && /\);/ {flag=0} flag')

  # extract the configuration IDs and names
  while IFS= read -r line; do
    if [[ $line =~ ([A-Za-z0-9]+)[[:space:]]+/\*[[:space:]]+(.+)[[:space:]]+\*\/ ]]; then
      local config_id="${BASH_REMATCH[1]}"
      local config_name="${BASH_REMATCH[2]}"
      echo "\"$config_id\":\"$config_name\""
    fi
  done <<<"$specific_config_list"
}

# Get the section data for a given id and key.
# - Arguments:
#   - $1: The path to the .pbxproj file.
#   - $2: The id.
#   - $3: The key.
# - Output:
#   - The section data.
# - Example:
#   get_section_data /path/to/project.pbxproj E5097DBE2890E0DA00DF5D57 MARKETING_VERSION
#   get_section_data /path/to/project.pbxproj 0225CCDE204BECF700273B48 INFOPLIST_FILE
get_section_data() {
  local pbxproj_path=$1
  local id=$2
  local key=$3
  local section
  section=$(awk "/$id \/\* /,/\};/" "$pbxproj_path")

  # /* Begin PBXNativeTarget section */
  # 		020E46EB22B1C42E0042F4C0 /* InstaTip */ = {
  # 			isa = PBXNativeTarget;
  # 			buildConfigurationList = 020E471622B1C4300042F4C0 /* Build configuration list for PBXNativeTarget "InstaTip" */;
  # 			buildPhases = (
  # 				2A283F54CA70ABA4600279D9 /* [CP] Check Pods Manifest.lock */,
  # 				020E46E822B1C42E0042F4C0 /* Sources */,
  # 				020E46E922B1C42E0042F4C0 /* Frameworks */,
  # 				020E46EA22B1C42E0042F4C0 /* Resources */,
  # 				954C1A36E92B1D92DD2CD74B /* [CP] Embed Pods Frameworks */,
  # 				ED978A56A7AAEE0D686151D6 /* [CP] Copy Pods Resources */,
  # 				02AF112A22FD0B2B006AB8D3 /* Crashlytics */,
  # 				026A2C5B23CC608500CFA557 /* Embed PlugIns */,
  # 			);
  # 			buildRules = (
  # 			);
  # 			dependencies = (
  # 				026A2C5A23CC608500CFA557 /* PBXTargetDependency */,
  # 			);
  # 			name = InstaTip;
  # 			packageProductDependencies = (
  # 				E587075F24A5CFD400057A2F /* Then */,
  # 				E587076224A5CFEF00057A2F /* SnapKit */,
  # 				E587076524A5D04900057A2F /* Siren */,
  # 				E587076824A5D06300057A2F /* Haptica */,
  # 				E587076B24A5D0A000057A2F /* SwiftyUserDefaults */,
  # 				E5E1D3A524A85BD100866961 /* ChouTiUI */,
  # 				E5E1D3A724A863F200866961 /* ChouTi */,
  # 			);
  # 			productName = hateTipping;
  # 			productReference = 020E46EC22B1C42E0042F4C0 /* InstaTip.app */;
  # 			productType = "com.apple.product-type.application";
  # 		};
  # 		020E470122B1C4300042F4C0 /* InstaTipTests */ = {
  # 			isa = PBXNativeTarget;
  # 			buildConfigurationList = 020E471922B1C4300042F4C0 /* Build configuration list for PBXNativeTarget "InstaTipTests" */;
  # 			buildPhases = (
  # 				EE7B5D238B1B47553677B9FB /* [CP] Check Pods Manifest.lock */,
  # 				020E46FE22B1C4300042F4C0 /* Sources */,
  # 				020E46FF22B1C4300042F4C0 /* Frameworks */,
  # 				020E470022B1C4300042F4C0 /* Resources */,
  # 			);
  # 			buildRules = (
  # 			);
  # 			dependencies = (
  # 				020E470422B1C4300042F4C0 /* PBXTargetDependency */,
  # 			);
  # 			name = InstaTipTests;
  # 			productName = hateTippingTests;
  # 			productReference = 020E470222B1C4300042F4C0 /* InstaTipTests.xctest */;
  # 			productType = "com.apple.product-type.bundle.unit-test";
  # 		};
  # 		020E470C22B1C4300042F4C0 /* InstaTipUITests */ = {
  # 			isa = PBXNativeTarget;
  # 			buildConfigurationList = 020E471C22B1C4300042F4C0 /* Build configuration list for PBXNativeTarget "InstaTipUITests" */;
  # 			buildPhases = (
  # 				F2FFCB7F5F76013CC60BBC96 /* [CP] Check Pods Manifest.lock */,
  # 				020E470922B1C4300042F4C0 /* Sources */,
  # 				020E470A22B1C4300042F4C0 /* Frameworks */,
  # 				020E470B22B1C4300042F4C0 /* Resources */,
  # 			);
  # 			buildRules = (
  # 			);
  # 			dependencies = (
  # 				020E470F22B1C4300042F4C0 /* PBXTargetDependency */,
  # 			);
  # 			name = InstaTipUITests;
  # 			productName = hateTippingUITests;
  # 			productReference = 020E470D22B1C4300042F4C0 /* InstaTipUITests.xctest */;
  # 			productType = "com.apple.product-type.bundle.ui-testing";
  # 		};
  # 		026A2C5123CC607500CFA557 /* MacHelperBundle */ = {
  # 			isa = PBXNativeTarget;
  # 			buildConfigurationList = 026A2C5723CC607500CFA557 /* Build configuration list for PBXNativeTarget "MacHelperBundle" */;
  # 			buildPhases = (
  # 				026A2C4E23CC607500CFA557 /* Sources */,
  # 				026A2C4F23CC607500CFA557 /* Frameworks */,
  # 				026A2C5023CC607500CFA557 /* Resources */,
  # 			);
  # 			buildRules = (
  # 			);
  # 			dependencies = (
  # 			);
  # 			name = MacHelperBundle;
  # 			productName = MacHelperBundle;
  # 			productReference = 026A2C5223CC607500CFA557 /* MacHelperBundle.bundle */;
  # 			productType = "com.apple.product-type.bundle";
  # 		};
  # /* End PBXNativeTarget section */

  # E5097DBE2890E0DA00DF5D57 /* Debug */ = {
  # 			isa = XCBuildConfiguration;
  # 			buildSettings = {
  # 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
  # 				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
  # 				CODE_SIGN_ENTITLEMENTS = "say-no-to-notch/Supporting Files/say-no-to-notch.entitlements";
  # 				CODE_SIGN_IDENTITY = "-";
  # 				CODE_SIGN_STYLE = Automatic;
  # 				COMBINE_HIDPI_IMAGES = YES;
  # 				CURRENT_PROJECT_VERSION = 8;
  # 				DEVELOPMENT_TEAM = UYW9ZSKZAQ;
  # 				ENABLE_HARDENED_RUNTIME = YES;
  # 				GENERATE_INFOPLIST_FILE = YES;
  # 				INFOPLIST_FILE = "say-no-to-notch/Supporting Files/Info.plist";
  # 				INFOPLIST_KEY_LSApplicationCategoryType = "public.app-category.utilities";
  # 				INFOPLIST_KEY_LSUIElement = NO;
  # 				INFOPLIST_KEY_NSHumanReadableCopyright = "Copyright © ibluebox. All rights reserved.";
  # 				INFOPLIST_KEY_NSMainStoryboardFile = Main;
  # 				INFOPLIST_KEY_NSPrincipalClass = Say_No_to_Notch.Application;
  # 				LD_RUNPATH_SEARCH_PATHS = (
  # 					"$(inherited)",
  # 					"@executable_path/../Frameworks",
  # 				);
  # 				MARKETING_VERSION = 1.1;
  # 				PRODUCT_BUNDLE_IDENTIFIER = "com.ibluebox.say-no-to-notch";
  # 				PRODUCT_NAME = "$(TARGET_NAME)";
  # 				SWIFT_EMIT_LOC_STRINGS = YES;
  # 				SWIFT_VERSION = 5.0;
  # 			};
  # 				E5097DBE2890E0DA00DF5D57 /* Debug */,
  # 				E5097DBF2890E0DA00DF5D57 /* Release */,
  # 			);
  # 			defaultConfigurationIsVisible = 0;
  # 			defaultConfigurationName = Release;
  # 		};

  local value
  value=$(echo "$section" | awk -v key="$key" '$1 == key {print substr($0, index($0, $3)); exit}' | tr -d '";')

  # remove quotes from the output
  value="${value//\"/}"

  echo "$value"
}

# Get the plist value for a given key.
# - Arguments:
#   - $1: The path to the plist file.
#   - $2: The key.
# - Output:
#   - The plist value.
# - Example:
#   get_plist_value /path/to/Info.plist CFBundleShortVersionString
get_plist_value() {
  local plist_path=$1
  local key=$2
  if [[ ! -f $plist_path ]]; then
    echo "🛑 No plist file found at $plist_path." >&2
    exit 1
  fi
  /usr/libexec/PlistBuddy -c "Print $key" "$plist_path" 2>/dev/null
}
