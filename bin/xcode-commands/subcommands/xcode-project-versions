#!/bin/bash

OVERVIEW="Print the versions of targets in a project."

print_help() {
  echo "$(tput bold)OVERVIEW:$(tput sgr0) $OVERVIEW

$(tput bold)USAGE:$(tput sgr0) xcode project-versions [<project-name>]

$(tput bold)ARGUMENTS:$(tput sgr0)

  [<project-name>]     The name of the project, not including the extension.
                       If not specified, the project in the current directory 
                       is used.

$(tput bold)OPTIONS:$(tput sgr0)

  --all-targets        Print the versions of all targets. By default, only 
                       application targets and app extensions are printed.
  -h, --help           Display this help message.
  -v, --version        Print the version information.

$(tput bold)EXAMPLES:$(tput sgr0)

  $(tput setaf 2)- xcode project-versions$(tput sgr0)
    Print the versions of app targets in the project in the current directory.
"
}

print_version() {
  echo "0.1.0"
}

set -e

SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"

# shellcheck disable=SC1091
source "$SCRIPT_DIR/../../../lib.sh"

# shellcheck disable=SC1091
source "$SCRIPT_DIR/utilities"

project_name=""
project_name_set=false
all_targets=false

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  --all-targets)
    all_targets=true
    shift # past argument
    ;;
  --help | -h)
    print_help
    exit 0
    ;;
  --version | -v)
    print_version
    exit 0
    ;;
  *)
    if [[ $project_name_set == false ]]; then
      project_name=$key
      project_name_set=true
      shift # past argument
    else
      echo "ðŸ›‘ Invalid argument: $1" >&2
      exit 1
    fi
    ;;
  esac
done

if [[ $project_name_set == false ]]; then
  SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
  file_name=$("$SCRIPT_DIR/xcode-project-file-name" "$@")
  # if the extension of the file_name is ".xcodeproj"
  if [[ $file_name == *.xcodeproj ]]; then
    # drop the extension
    project_name=${file_name%.xcodeproj}
  fi
fi

project_file_name="$project_name".xcodeproj
pbxproj_path="$project_file_name"/project.pbxproj

# confirm project_file_name exists
if [[ ! -d $project_file_name ]]; then
  echo "ðŸ›‘ No project file named $project_file_name found in the current directory." >&2
  exit 1
fi

# get the info plist path for a given configuration id
get_info_plist_path() {
  get_section_data "$pbxproj_path" "$1" "INFOPLIST_FILE"
}

# get the marketing version for a given configuration id
get_marketing_version() {
  get_section_data "$pbxproj_path" "$1" "MARKETING_VERSION"
}

get_build_number() {
  get_section_data "$pbxproj_path" "$1" "CURRENT_PROJECT_VERSION"
}

get_product_type() {
  get_section_data "$pbxproj_path" "$1" "productType"
  # com.apple.product-type.application
  # com.apple.product-type.app-extension
  # com.apple.product-type.bundle.unit-test
  # com.apple.product-type.bundle.ui-testing
  # com.apple.product-type.bundle
}

APPLICATION_PRODUCT_TYPE="com.apple.product-type.application"
APPLICATION_EXTENSION_PRODUCT_TYPE="com.apple.product-type.app-extension"

declare -a target_ids
declare -a target_names

while IFS=':' read -r target_id target_name; do
  # remove quotes from the output
  target_id="${target_id//\"/}"
  target_name="${target_name//\"/}"

  target_ids+=("$target_id")
  target_names+=("$target_name")
done < <(get_targets "$pbxproj_path")

# iterate over target IDs and get their marketing versions
for i in "${!target_ids[@]}"; do
  target_name="${target_names[$i]}"
  target_id="${target_ids[$i]}"
  config_list_id=$(get_build_configuration_list_id "$pbxproj_path" "$target_id")

  # skip non-application targets if --application-only is specified
  if [[ $all_targets == false ]]; then
    product_type=$(get_product_type "$target_id")
    if [[ $product_type != "$APPLICATION_PRODUCT_TYPE" && $product_type != "$APPLICATION_EXTENSION_PRODUCT_TYPE" ]]; then
      continue
    fi
  fi

  echo "${CYAN}${BOLD}$target_name${NORMAL}:"

  unset -v config_ids
  unset -v config_names
  declare -a config_ids
  declare -a config_names

  while IFS=':' read -r config_id config_name; do
    # remove quotes from the output
    config_id="${config_id//\"/}"
    config_name="${config_name//\"/}"

    config_ids+=("$config_id")
    config_names+=("$config_name")
  done < <(get_configurations "$pbxproj_path" "$config_list_id")

  # iterate over configuration IDs and get their marketing versions
  for j in "${!config_ids[@]}"; do
    config_name="${config_names[$j]}"
    config_id="${config_ids[$j]}"

    project_version=$(get_marketing_version "$config_id")
    build_number=$(get_build_number "$config_id")

    info_plist_path=$(get_info_plist_path "$config_id")
    # replace $(TARGET_NAME) with the actual target name
    info_plist_path="${info_plist_path/\$\(TARGET_NAME\)/$target_name}"

    set +e
    has_version_in_info_plist=true
    info_plist_version=$(get_plist_value "$info_plist_path" "CFBundleShortVersionString")
    # shellcheck disable=SC2181
    if [[ $? -ne 0 ]]; then
      has_version_in_info_plist=false
    fi
    info_plist_build_number=$(get_plist_value "$info_plist_path" "CFBundleVersion")
    set -e

    printf "-"
    printf " %s:\n  - Project: %s" "$config_name" "$project_version"
    if [[ $build_number != "" ]]; then
      printf " (%s)\n" "$build_number"
    else
      printf "\n"
    fi

    if [[ $has_version_in_info_plist == true ]]; then
      printf "  - Info.plist: %s" "$info_plist_version"
      if [[ $info_plist_build_number != "" ]]; then
        printf " (%s)\n" "$info_plist_build_number"
      else
        printf "\n"
      fi
    fi
  done

done

# References:
# - https://medium.com/flawless-app-stories/how-to-handle-marketing-version-of-xcode-11-by-ci-db64a0ac71b9
# - https://github.com/macecchi/xcopen/blob/master/xcopen
