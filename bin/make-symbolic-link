#!/bin/bash

print_help() {
  echo "$(tput bold)OVERVIEW:$(tput sgr0) Make symbolic link.

$(tput bold)USAGE:$(tput sgr0) $(basename "$0") [--no-backup] <destination-path> <symbolic-link-path>

$(tput bold)ARGUMENTS:$(tput sgr0)

  destination-path     Path to the file to link to, aka destination.
  symbolic-link-path   Path to the symbolic link file.

$(tput bold)OPTIONS:$(tput sgr0)

  --no-backup          Overwrite existing symbolic link path without backup.
  -h, --help           Display this help message.
  -v, --version        Print the version information.

$(tput bold)EXAMPLES:$(tput sgr0)

  $(tput setaf 2)- $(basename "$0") path/to/destination path/to/symlink$(tput sgr0)
    Make a symbolic link at path/to/symlink that points to path/to/destination.

  $(tput setaf 2)- $(basename "$0") --no-backup path/to/destination path/to/symlink$(tput sgr0)
    Make a symbolic link at path/to/symlink that points to path/to/destination,
    and overwrite existing symbolic link without backup.
"
}

print_version() {
  echo "0.1.0"
}

set -e

# print help if no arguments
if [[ $# -eq 0 ]]; then
  print_help
  exit 1
fi

# shellcheck disable=SC1091
source "$(dirname "${BASH_SOURCE[0]}")/../lib.sh"

destination_path=""
symlink_path=""
no_backup=false

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  --no-backup)
    no_backup=true
    shift # past option
    ;;
  --help | -h)
    print_help
    exit 0
    ;;
  --version | -v)
    print_version
    exit 0
    ;;
  *)
    if [[ -n $1 && ${1:0:1} != '-' ]]; then # if there is an argument and that it doesn't start with a "-"
      if [[ $destination_path == "" ]]; then
        destination_path="$1"
      elif [[ $symlink_path == "" ]]; then
        symlink_path="$1"
      else
        echo "🛑 Unexpected argument: $1" >&2
        exit 1
      fi
      shift # past argument
    else
      echo "🛑 Unknown option: $1" >&2
      exit 1
    fi
    ;;
  esac
done

# if no destination path, exit
if [[ $destination_path == "" ]]; then
  echo "🛑 No destination path provided." >&2
  exit 1
fi

# if no symlink path, exit
if [[ $symlink_path == "" ]]; then
  echo "🛑 No symlink path provided." >&2
  exit 1
fi

# if destination path doesn't exist, skip
# because the destination path could be a relative path, needs to cd to the
# symlink path's directory to check if the destination path exists
current_dir=$(pwd)
symlink_realpath=$(_ct_grealpath --no-symlinks "$symlink_path")
cd "$(dirname "$symlink_realpath")" || exit 1
if [[ ! -e "$destination_path" ]]; then
  echo "🛑 Destination path doesn't exist: $destination_path" >&2
  exit 1
fi
cd "$current_dir" || exit 1

function backup-symlink-path() {
  symlink_path_backup=$(rotate-path "$symlink_path" --suffix "-backup")
  if [[ $no_backup == true ]]; then
    mv "$symlink_path" "$symlink_path_backup"
    return
  fi

  echo "➡️  Rename '$symlink_path' to '$symlink_path_backup'"
  mv "$symlink_path" "$symlink_path_backup"
  clear-line
  echo "✅ Renamed '$symlink_path' to '$symlink_path_backup'"
}

if [[ -e "$symlink_path" && ! -L "$symlink_path" ]]; then
  # symlink path is a regular file or dir
  backup-symlink-path
fi

should_create_link=true
if [[ -L "$symlink_path" ]]; then
  # already have symlink
  link_destination_path=$(readlink -f "$symlink_path")
  if [[ $link_destination_path == "$destination_path" ]]; then
    # already linked
    should_create_link=false
  else
    # different links
    backup-symlink-path
  fi
fi

if [[ $should_create_link == true ]]; then
  # create intermediate directories if needed
  if [[ ! -d "$(dirname "$symlink_path")" ]]; then
    echo "➡️  Creating directory: $(dirname "$symlink_path")"
    mkdir -p "$(dirname "$symlink_path")" || exit 1
    clear-line
    echo "✅ Created directory: $(dirname "$symlink_path")"
  fi
  # create symlink
  echo "➡️  Making symlink: $(tput setaf 6)$symlink_path$(tput sgr0) -> $destination_path"
  ln -s "$destination_path" "$symlink_path"
  clear-line
  echo "✅ Created symlink: $(tput setaf 6)$symlink_path$(tput sgr0) -> $destination_path"
else
  echo "✅ Already linked: $(tput setaf 6)$symlink_path$(tput sgr0) -> $destination_path"
fi

if [[ $no_backup == true ]]; then
  # clean up symlink_path_backup
  if [[ -e "$symlink_path_backup" ]]; then
    rm -rf "$symlink_path_backup"
  fi
fi
